$date
	Fri May 23 20:22:32 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var wire 16 ! r0 [15:0] $end
$var wire 16 " r1 [15:0] $end
$var wire 16 # r2 [15:0] $end
$var wire 16 $ r3 [15:0] $end
$var wire 16 % r4 [15:0] $end
$var wire 16 & r5 [15:0] $end
$var wire 16 ' r6 [15:0] $end
$var wire 16 ( r7 [15:0] $end
$var parameter 32 ) DATA_WIDTH $end
$var parameter 32 * WIDTH $end
$var reg 1 + clk $end
$var reg 1 , reset $end
$scope module DUT $end
$var wire 1 + clk $end
$var wire 1 - id_ex_flush $end
$var wire 1 . if_id_flush $end
$var wire 1 , reset $end
$var wire 1 / zero_flag $end
$var wire 16 0 wb_write_data [15:0] $end
$var wire 1 1 wb_reg_write $end
$var wire 16 2 wb_read_data [15:0] $end
$var wire 3 3 wb_rd [2:0] $end
$var wire 1 4 wb_mem_to_reg $end
$var wire 16 5 wb_alu_result [15:0] $end
$var wire 1 6 stall $end
$var wire 1 7 reg_write $end
$var wire 1 8 pc_write $end
$var wire 12 9 pc_next [11:0] $end
$var wire 12 : pc_current [11:0] $end
$var wire 16 ; mem_write_data [15:0] $end
$var wire 1 < mem_write $end
$var wire 1 = mem_reg_write $end
$var wire 16 > mem_read_data [15:0] $end
$var wire 1 ? mem_read $end
$var wire 3 @ mem_rd [2:0] $end
$var wire 12 A mem_pc [11:0] $end
$var wire 1 B mem_mem_write $end
$var wire 1 C mem_mem_read $end
$var wire 1 D mem_branch $end
$var wire 16 E mem_alu_result [15:0] $end
$var wire 1 F ldpc $end
$var wire 12 G instr [11:0] $end
$var wire 1 H if_id_write $end
$var wire 12 I if_id_pc [11:0] $end
$var wire 12 J if_id_instr [11:0] $end
$var wire 3 K id_rt [2:0] $end
$var wire 3 L id_rs [2:0] $end
$var wire 16 M id_reg_data2 [15:0] $end
$var wire 16 N id_reg_data1 [15:0] $end
$var wire 3 O id_rd [2:0] $end
$var wire 3 P id_opcode [2:0] $end
$var wire 12 Q id_jump_target [11:0] $end
$var wire 16 R id_imm_ext [15:0] $end
$var wire 6 S id_imm6 [5:0] $end
$var wire 3 T id_ex_rt [2:0] $end
$var wire 3 U id_ex_rs [2:0] $end
$var wire 1 V id_ex_reg_write $end
$var wire 16 W id_ex_reg_data2 [15:0] $end
$var wire 16 X id_ex_reg_data1 [15:0] $end
$var wire 3 Y id_ex_rd [2:0] $end
$var wire 12 Z id_ex_pc [11:0] $end
$var wire 1 [ id_ex_mem_write $end
$var wire 1 \ id_ex_mem_read $end
$var wire 16 ] id_ex_imm_ext [15:0] $end
$var wire 1 ^ id_ex_branch $end
$var wire 1 _ id_ex_alu_src $end
$var wire 2 ` id_ex_alu_op [1:0] $end
$var wire 2 a forwardB [1:0] $end
$var wire 2 b forwardA [1:0] $end
$var wire 16 c ex_forw_B [15:0] $end
$var wire 16 d ex_forw_A [15:0] $end
$var wire 16 e ex_alu_result [15:0] $end
$var wire 1 f branch $end
$var wire 1 g alu_src $end
$var wire 2 h alu_op [1:0] $end
$var wire 16 i alu_in2_reg [15:0] $end
$var wire 16 j alu_in2 [15:0] $end
$var wire 16 k alu_in1 [15:0] $end
$var parameter 32 l DATA_WIDTH $end
$var parameter 32 m DMEM_DEPTH $end
$var parameter 32 n IMEM_DEPTH $end
$var parameter 32 o REGADDR_W $end
$var parameter 32 p WIDTH $end
$scope module ALU_I $end
$var wire 16 q a [15:0] $end
$var wire 16 r b [15:0] $end
$var wire 1 / zero $end
$var wire 2 s alu_op [1:0] $end
$var parameter 32 t DATA_WIDTH $end
$var reg 16 u result [15:0] $end
$upscope $end
$scope module CONTROL $end
$var wire 3 v opcode [2:0] $end
$var reg 2 w alu_op [1:0] $end
$var reg 1 g alu_src $end
$var reg 1 f branch $end
$var reg 1 F ldpc $end
$var reg 1 ? mem_read $end
$var reg 1 < mem_write $end
$var reg 1 7 reg_write $end
$upscope $end
$scope module DMEM $end
$var wire 8 x addr [7:0] $end
$var wire 1 + clk $end
$var wire 16 y write_data [15:0] $end
$var wire 16 z read_data [15:0] $end
$var wire 1 B mem_write $end
$var wire 1 C mem_read $end
$var parameter 32 { ADDR_WIDTH $end
$var parameter 32 | DATA_WIDTH $end
$var parameter 136 } MEMFILE $end
$upscope $end
$scope module EX_MEM $end
$var wire 1 + clk $end
$var wire 16 ~ ex_alu_result [15:0] $end
$var wire 16 !" ex_reg_data2 [15:0] $end
$var wire 1 , reset $end
$var wire 1 V ex_reg_write $end
$var wire 3 "" ex_rd [2:0] $end
$var wire 12 #" ex_pc [11:0] $end
$var wire 1 [ ex_mem_write $end
$var wire 1 \ ex_mem_read $end
$var wire 1 ^ ex_branch $end
$var parameter 32 $" DATA_WIDTH $end
$var parameter 32 %" PC_WIDTH $end
$var parameter 32 &" REGADDR_WIDTH $end
$var reg 16 '" mem_alu_result [15:0] $end
$var reg 1 D mem_branch $end
$var reg 1 C mem_mem_read $end
$var reg 1 B mem_mem_write $end
$var reg 12 (" mem_pc [11:0] $end
$var reg 3 )" mem_rd [2:0] $end
$var reg 1 = mem_reg_write $end
$var reg 16 *" mem_write_data [15:0] $end
$upscope $end
$scope module FORWARD_UNIT $end
$var wire 3 +" ex_mem_rd [2:0] $end
$var wire 1 = ex_mem_reg_write $end
$var wire 1 1 wb_reg_write $end
$var wire 3 ," wb_rd [2:0] $end
$var wire 3 -" id_ex_rt [2:0] $end
$var wire 3 ." id_ex_rs [2:0] $end
$var reg 2 /" forwardA [1:0] $end
$var reg 2 0" forwardB [1:0] $end
$upscope $end
$scope module HAZARD_UNIT $end
$var wire 3 1" if_id_rs [2:0] $end
$var wire 3 2" if_id_rt [2:0] $end
$var wire 3 3" id_ex_rd [2:0] $end
$var wire 1 \ id_ex_mem_read $end
$var reg 1 H if_id_write $end
$var reg 1 8 pc_write $end
$var reg 1 6 stall $end
$upscope $end
$scope module ID_EX $end
$var wire 1 + clk $end
$var wire 1 - flush $end
$var wire 2 4" id_alu_op [1:0] $end
$var wire 1 g id_alu_src $end
$var wire 1 f id_branch $end
$var wire 1 ? id_mem_read $end
$var wire 1 < id_mem_write $end
$var wire 3 5" id_rd [2:0] $end
$var wire 1 7 id_reg_write $end
$var wire 3 6" id_rs [2:0] $end
$var wire 3 7" id_rt [2:0] $end
$var wire 1 , reset $end
$var wire 16 8" id_read_data2 [15:0] $end
$var wire 16 9" id_read_data1 [15:0] $end
$var wire 12 :" id_pc [11:0] $end
$var wire 16 ;" id_imm [15:0] $end
$var parameter 32 <" DATA_WIDTH $end
$var parameter 32 =" PC_WIDTH $end
$var parameter 32 >" REGADDR_WIDTH $end
$var reg 2 ?" ex_alu_op [1:0] $end
$var reg 1 _ ex_alu_src $end
$var reg 1 ^ ex_branch $end
$var reg 16 @" ex_imm_ext [15:0] $end
$var reg 1 \ ex_mem_read $end
$var reg 1 [ ex_mem_write $end
$var reg 12 A" ex_pc [11:0] $end
$var reg 3 B" ex_rd [2:0] $end
$var reg 16 C" ex_reg_data1 [15:0] $end
$var reg 16 D" ex_reg_data2 [15:0] $end
$var reg 1 V ex_reg_write $end
$var reg 3 E" ex_rs [2:0] $end
$var reg 3 F" ex_rt [2:0] $end
$upscope $end
$scope module ID_REGFILE $end
$var wire 1 + clk $end
$var wire 3 G" read_reg1 [2:0] $end
$var wire 3 H" read_reg2 [2:0] $end
$var wire 1 , reset $end
$var wire 16 I" write_data [15:0] $end
$var wire 3 J" write_reg [2:0] $end
$var wire 1 1 reg_write $end
$var wire 16 K" read_data2 [15:0] $end
$var wire 16 L" read_data1 [15:0] $end
$var parameter 32 M" DATA_WIDTH $end
$var parameter 35 N" NUM_REGS $end
$var parameter 32 O" REGADDR_WIDTH $end
$scope begin $unm_blk_34 $end
$var integer 32 P" i [31:0] $end
$upscope $end
$upscope $end
$scope module IF_ID $end
$var wire 1 + clk $end
$var wire 1 . flush $end
$var wire 1 , reset $end
$var wire 1 Q" stall $end
$var wire 12 R" if_pc [11:0] $end
$var wire 12 S" if_instr [11:0] $end
$var parameter 32 T" INSTR_WIDTH $end
$var parameter 32 U" PC_WIDTH $end
$var reg 12 V" id_instr [11:0] $end
$var reg 12 W" id_pc [11:0] $end
$upscope $end
$scope module IMEM $end
$var wire 8 X" addr [7:0] $end
$var wire 12 Y" instr [11:0] $end
$var parameter 32 Z" ADDR_WIDTH $end
$var parameter 32 [" DATA_WIDTH $end
$var parameter 144 \" MEMFILE $end
$scope begin $unm_blk_3 $end
$var integer 32 ]" i [31:0] $end
$upscope $end
$upscope $end
$scope module IMM_GEN $end
$var wire 6 ^" imm_in [5:0] $end
$var wire 16 _" imm_out [15:0] $end
$var parameter 32 `" IN_WIDTH $end
$var parameter 32 a" OUT_WIDTH $end
$upscope $end
$scope module MEM_WB $end
$var wire 1 + clk $end
$var wire 16 b" mem_alu_result [15:0] $end
$var wire 1 C mem_mem_read $end
$var wire 3 c" mem_rd [2:0] $end
$var wire 16 d" mem_read_data [15:0] $end
$var wire 1 = mem_reg_write $end
$var wire 1 , reset $end
$var parameter 32 e" DATA_WIDTH $end
$var parameter 32 f" REGADDR_WIDTH $end
$var reg 16 g" wb_alu_result [15:0] $end
$var reg 1 4 wb_mem_to_reg $end
$var reg 3 h" wb_rd [2:0] $end
$var reg 16 i" wb_read_data [15:0] $end
$var reg 1 1 wb_reg_write $end
$upscope $end
$scope module PC $end
$var wire 1 + clk $end
$var wire 12 j" pc_in [11:0] $end
$var wire 1 8 pc_write $end
$var wire 1 , reset $end
$var parameter 32 k" WIDTH $end
$var reg 12 l" pc_out [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1100 k"
b11 f"
b10000 e"
b10000 a"
b110 `"
b10010010100010001001101001011110110100101101110011100110111010001110010010111110110100101101110011010010111010000101110011010000110010101111000 \"
b1100 ["
b1000 Z"
b1100 U"
b1100 T"
b11 O"
b1000 N"
b10000 M"
b11 >"
b1100 ="
b10000 <"
b11 &"
b1100 %"
b10000 $"
b100100101000100010011010010111101100100011000010111010001100001010111110110100101101110011010010111010000101110011010000110010101111000 }
b10000 |
b1000 {
b10000 t
b1100 p
b11 o
b100000000 n
b100000000 m
b10000 l
b1100 *
b10000 )
$end
#0
$dumpvars
b0 l"
b1 j"
b0 i"
b0 h"
b0 g"
bz d"
b0 c"
b0 b"
b0 _"
b0 ^"
b100000000 ]"
b10001000101 Y"
b0 X"
b0 W"
b0 V"
b10001000101 S"
b0 R"
0Q"
b1000 P"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 #"
b0 ""
b0 !"
b0 ~
bz z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 s
b0 r
b0 q
b0 k
b0 j
b0 i
b0 h
0g
0f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
0_
0^
b0 ]
0\
0[
b0 Z
b0 Y
b0 X
b0 W
0V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
1H
b10001000101 G
0F
b0 E
0D
0C
0B
b0 A
b0 @
0?
bz >
0=
0<
b0 ;
b0 :
b1 9
18
17
06
b0 5
04
b0 3
b0 2
01
b0 0
1/
0.
0-
1,
0+
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#1000
0,
#5000
b10 h
b10 w
b10 4"
1g
17
b1000101 Q
b101 R
b101 ;"
b101 _"
b101 S
b101 ^"
b101 K
b101 2"
b101 7"
b101 H"
b1 O
b1 5"
b10 P
b10 v
b10 9
b10 j"
b10010111110 G
b10010111110 S"
b10010111110 Y"
b1 X"
bz 2
bz i"
1V
b10001000101 J
b10001000101 V"
b1 :
b1 R"
b1 l"
1+
#10000
0+
#15000
0/
b101 e
b101 u
b101 ~
b11 9
b11 j"
b11001010 G
b11001010 S"
b11001010 Y"
b10 X"
b10111110 Q
b1111111111111110 R
b1111111111111110 ;"
b1111111111111110 _"
b111110 S
b111110 ^"
b110 K
b110 2"
b110 7"
b110 H"
b111 L
b111 1"
b111 6"
b111 G"
b10 O
b10 5"
b101 j
b101 r
b10 :
b10 R"
b10 l"
b10010111110 J
b10010111110 V"
b1 I
b1 :"
b1 W"
b1 Y
b1 ""
b1 3"
b1 B"
b101 T
b101 -"
b101 F"
b101 ]
b101 @"
1_
b10 `
b10 s
b10 ?"
1=
1+
#20000
0+
#25000
b1111111111111110 e
b1111111111111110 u
b1111111111111110 ~
b0 h
b0 w
b0 4"
0g
17
b101 x
b1111111111111110 j
b1111111111111110 r
b11001010 Q
b1010 R
b1010 ;"
b1010 _"
b1010 S
b1010 ^"
b10 K
b10 2"
b10 7"
b10 H"
b1 L
b1 1"
b1 6"
b1 G"
b11 O
b11 5"
b0 P
b0 v
b100 9
b100 j"
b1100001010 G
b1100001010 S"
b1100001010 Y"
b11 X"
11
b1 @
b1 )"
b1 +"
b1 c"
b101 E
b101 '"
b101 b"
b10 Y
b10 ""
b10 3"
b10 B"
b110 T
b110 -"
b110 F"
b111 U
b111 ."
b111 E"
b1111111111111110 ]
b1111111111111110 @"
b1 Z
b1 #"
b1 A"
b11001010 J
b11001010 V"
b10 I
b10 :"
b10 W"
b11 :
b11 R"
b11 l"
1+
#30000
0+
#35000
b101 k
b101 q
b101 d
b11 h
b11 w
b11 4"
17
0/
b11 e
b11 u
b11 ~
b101 N
b101 9"
b101 L"
b1111111111111110 i
b1111111111111110 !"
b1111111111111110 c
b101 9
b101 j"
b11101001010 G
b11101001010 S"
b11101001010 Y"
b100 X"
b100001010 Q
b100 O
b100 5"
b1 P
b1 v
b1111111111111110 j
b1111111111111110 r
b11111110 x
b10 a
b10 0"
b1 b
b1 /"
b101 0
b101 I"
b100 :
b100 R"
b100 l"
b1100001010 J
b1100001010 V"
b11 I
b11 :"
b11 W"
b11 Y
b11 ""
b11 3"
b11 B"
b10 T
b10 -"
b10 F"
b1 U
b1 ."
b1 E"
b1010 ]
b1010 @"
b10 Z
b10 #"
b10 A"
0_
b0 `
b0 s
b0 ?"
b10 @
b10 )"
b10 +"
b10 c"
b1111111111111110 E
b1111111111111110 '"
b1111111111111110 b"
b1 A
b1 ("
b1 3
b1 ,"
b1 J"
b1 h"
b101 5
b101 g"
1+
#40000
0+
#45000
b1111111111111110 M
b1111111111111110 8"
b1111111111111110 K"
b1111111111111110 j
b1111111111111110 r
b1 h
b1 w
b1 4"
17
b1111111111111110 0
b1111111111111110 I"
b1 a
b1 0"
b0 b
b0 /"
b11 x
b1111111111111110 i
b1111111111111110 !"
b1111111111111110 c
b111 e
b111 u
b111 ~
b101001010 Q
b101 O
b101 5"
b11 P
b11 v
b110 9
b110 j"
b101000000111 G
b101000000111 S"
b101000000111 Y"
b101 X"
b10 3
b10 ,"
b10 J"
b10 h"
b1111111111111110 5
b1111111111111110 g"
b11 @
b11 )"
b11 +"
b11 c"
b1111111111111110 ;
b1111111111111110 y
b1111111111111110 *"
b11 E
b11 '"
b11 b"
b10 A
b10 ("
b100 Y
b100 ""
b100 3"
b100 B"
b101 X
b101 C"
b11 Z
b11 #"
b11 A"
b11 `
b11 s
b11 ?"
b11101001010 J
b11101001010 V"
b100 I
b100 :"
b100 W"
b101 :
b101 R"
b101 l"
b101 "
1+
#50000
0+
#55000
1-
b0 N
b0 9"
b0 L"
1.
1F
1g
b10 h
b10 w
b10 4"
07
b0 M
b0 8"
b0 K"
b111 9
b111 j"
b10110111011 G
b10110111011 S"
b10110111011 Y"
b110 X"
b111 Q
b111 R
b111 ;"
b111 _"
b111 S
b111 ^"
b111 K
b111 2"
b111 7"
b111 H"
b0 L
b0 1"
b0 6"
b0 G"
b0 O
b0 5"
b101 P
b101 v
b1111111111111011 e
b1111111111111011 u
b1111111111111011 ~
b111 x
b0 a
b0 0"
b11 0
b11 I"
b1111111111111110 #
b110 :
b110 R"
b110 l"
b101000000111 J
b101000000111 V"
b101 I
b101 :"
b101 W"
b101 Y
b101 ""
b101 3"
b101 B"
b1111111111111110 W
b1111111111111110 D"
b100 Z
b100 #"
b100 A"
b1 `
b1 s
b1 ?"
b100 @
b100 )"
b100 +"
b100 c"
b111 E
b111 '"
b111 b"
b11 A
b11 ("
b11 3
b11 ,"
b11 J"
b11 h"
b11 5
b11 g"
1+
#60000
0+
#65000
1/
b0 j
b0 r
0-
b0 i
b0 !"
b0 c
b0 k
b0 q
b0 d
b1000 9
b1000 j"
17
b0 h
b0 w
b0 4"
0.
0F
0g
b111 0
b111 I"
b11111011 x
b0 e
b0 u
b0 ~
b0 Q
b0 R
b0 ;"
b0 _"
b0 S
b0 ^"
b0 K
b0 2"
b0 7"
b0 H"
b0 P
b0 v
b10111011111 G
b10111011111 S"
b10111011111 Y"
b111 X"
b100 3
b100 ,"
b100 J"
b100 h"
b111 5
b111 g"
b101 @
b101 )"
b101 +"
b101 c"
b1111111111111011 E
b1111111111111011 '"
b1111111111111011 b"
b100 A
b100 ("
b0 Y
b0 ""
b0 3"
b0 B"
b0 T
b0 -"
b0 F"
b0 U
b0 ."
b0 E"
b0 ]
b0 @"
b0 W
b0 D"
b0 X
b0 C"
b0 Z
b0 #"
b0 A"
b0 `
b0 s
b0 ?"
0V
b0 J
b0 V"
b0 I
b0 :"
b0 W"
b111 :
b111 R"
b111 l"
b11 $
1+
#70000
0+
#75000
b11 N
b11 9"
b11 L"
b10 h
b10 w
b10 4"
1g
17
b1001 9
b1001 j"
b0 G
b0 S"
b0 Y"
b1000 X"
b111011111 Q
b11111 R
b11111 ;"
b11111 _"
b11111 S
b11111 ^"
b111 K
b111 2"
b111 7"
b111 H"
b11 L
b11 1"
b11 6"
b11 G"
b111 O
b111 5"
b10 P
b10 v
b0 x
b1111111111111011 0
b1111111111111011 I"
b111 %
b1000 :
b1000 R"
b1000 l"
b10111011111 J
b10111011111 V"
b111 I
b111 :"
b111 W"
1V
b0 @
b0 )"
b0 +"
b0 c"
b0 ;
b0 y
b0 *"
b0 E
b0 '"
b0 b"
b0 A
b0 ("
0=
b101 3
b101 ,"
b101 J"
b101 h"
b1111111111111011 5
b1111111111111011 g"
1+
#80000
0+
#85000
b11 k
b11 q
b11 d
0/
b11111 e
b11111 u
b11111 ~
b0 N
b0 9"
b0 L"
b0 h
b0 w
b0 4"
0g
17
b0 0
b0 I"
b11111 j
b11111 r
b0 Q
b0 R
b0 ;"
b0 _"
b0 S
b0 ^"
b0 K
b0 2"
b0 7"
b0 H"
b0 L
b0 1"
b0 6"
b0 G"
b0 O
b0 5"
b0 P
b0 v
b1010 9
b1010 j"
b1001 X"
b0 3
b0 ,"
b0 J"
b0 h"
b0 5
b0 g"
01
1=
b111 Y
b111 ""
b111 3"
b111 B"
b111 T
b111 -"
b111 F"
b11 U
b11 ."
b11 E"
b11111 ]
b11111 @"
b11 X
b11 C"
b111 Z
b111 #"
b111 A"
1_
b10 `
b10 s
b10 ?"
b0 J
b0 V"
b1000 I
b1000 :"
b1000 W"
b1001 :
b1001 R"
b1001 l"
b1111111111111011 &
1+
#90000
0+
#95000
1/
b0 k
b0 q
b0 d
b1011 9
b1011 j"
b1010 X"
b0 j
b0 r
b0 e
b0 u
b0 ~
b11111 x
b1010 :
b1010 R"
b1010 l"
b1001 I
b1001 :"
b1001 W"
b0 Y
b0 ""
b0 3"
b0 B"
b0 T
b0 -"
b0 F"
b0 U
b0 ."
b0 E"
b0 ]
b0 @"
b0 X
b0 C"
b1000 Z
b1000 #"
b1000 A"
0_
b0 `
b0 s
b0 ?"
b111 @
b111 )"
b111 +"
b111 c"
b11111 E
b11111 '"
b11111 b"
b111 A
b111 ("
11
1+
#100000
0+
#105000
b11111 0
b11111 I"
b0 x
b1100 9
b1100 j"
b1011 X"
b111 3
b111 ,"
b111 J"
b111 h"
b11111 5
b11111 g"
b0 @
b0 )"
b0 +"
b0 c"
b0 E
b0 '"
b0 b"
b1000 A
b1000 ("
b1001 Z
b1001 #"
b1001 A"
b1010 I
b1010 :"
b1010 W"
b1011 :
b1011 R"
b1011 l"
1+
#110000
0+
#115000
b1101 9
b1101 j"
b1100 X"
b0 0
b0 I"
b11111 (
b1100 :
b1100 R"
b1100 l"
b1011 I
b1011 :"
b1011 W"
b1010 Z
b1010 #"
b1010 A"
b1001 A
b1001 ("
b0 3
b0 ,"
b0 J"
b0 h"
b0 5
b0 g"
1+
#120000
0+
#125000
b1110 9
b1110 j"
b1101 X"
b1010 A
b1010 ("
b1011 Z
b1011 #"
b1011 A"
b1100 I
b1100 :"
b1100 W"
b1101 :
b1101 R"
b1101 l"
1+
#130000
0+
#135000
b1111 9
b1111 j"
b1110 X"
b1110 :
b1110 R"
b1110 l"
b1101 I
b1101 :"
b1101 W"
b1100 Z
b1100 #"
b1100 A"
b1011 A
b1011 ("
1+
#140000
0+
#145000
b10000 9
b10000 j"
b1111 X"
b1100 A
b1100 ("
b1101 Z
b1101 #"
b1101 A"
b1110 I
b1110 :"
b1110 W"
b1111 :
b1111 R"
b1111 l"
1+
#150000
0+
#155000
b10001 9
b10001 j"
b10000 X"
b10000 :
b10000 R"
b10000 l"
b1111 I
b1111 :"
b1111 W"
b1110 Z
b1110 #"
b1110 A"
b1101 A
b1101 ("
1+
#160000
0+
#165000
b10010 9
b10010 j"
b10001 X"
b1110 A
b1110 ("
b1111 Z
b1111 #"
b1111 A"
b10000 I
b10000 :"
b10000 W"
b10001 :
b10001 R"
b10001 l"
1+
#170000
0+
#175000
b10011 9
b10011 j"
b10010 X"
b10010 :
b10010 R"
b10010 l"
b10001 I
b10001 :"
b10001 W"
b10000 Z
b10000 #"
b10000 A"
b1111 A
b1111 ("
1+
#180000
0+
#185000
b10100 9
b10100 j"
b10011 X"
b10000 A
b10000 ("
b10001 Z
b10001 #"
b10001 A"
b10010 I
b10010 :"
b10010 W"
b10011 :
b10011 R"
b10011 l"
1+
#190000
0+
#195000
b10101 9
b10101 j"
b10100 X"
b10100 :
b10100 R"
b10100 l"
b10011 I
b10011 :"
b10011 W"
b10010 Z
b10010 #"
b10010 A"
b10001 A
b10001 ("
1+
#200000
0+
#205000
b10110 9
b10110 j"
b10101 X"
b10010 A
b10010 ("
b10011 Z
b10011 #"
b10011 A"
b10100 I
b10100 :"
b10100 W"
b10101 :
b10101 R"
b10101 l"
1+
#210000
0+
#215000
b10111 9
b10111 j"
b10110 X"
b10110 :
b10110 R"
b10110 l"
b10101 I
b10101 :"
b10101 W"
b10100 Z
b10100 #"
b10100 A"
b10011 A
b10011 ("
1+
#220000
0+
#225000
b11000 9
b11000 j"
b10111 X"
b10100 A
b10100 ("
b10101 Z
b10101 #"
b10101 A"
b10110 I
b10110 :"
b10110 W"
b10111 :
b10111 R"
b10111 l"
1+
#230000
0+
#235000
b11001 9
b11001 j"
b11000 X"
b11000 :
b11000 R"
b11000 l"
b10111 I
b10111 :"
b10111 W"
b10110 Z
b10110 #"
b10110 A"
b10101 A
b10101 ("
1+
#240000
0+
#245000
b11010 9
b11010 j"
b11001 X"
b10110 A
b10110 ("
b10111 Z
b10111 #"
b10111 A"
b11000 I
b11000 :"
b11000 W"
b11001 :
b11001 R"
b11001 l"
1+
#250000
0+
#255000
b11011 9
b11011 j"
b11010 X"
b11010 :
b11010 R"
b11010 l"
b11001 I
b11001 :"
b11001 W"
b11000 Z
b11000 #"
b11000 A"
b10111 A
b10111 ("
1+
#260000
0+
#265000
b11100 9
b11100 j"
b11011 X"
b11000 A
b11000 ("
b11001 Z
b11001 #"
b11001 A"
b11010 I
b11010 :"
b11010 W"
b11011 :
b11011 R"
b11011 l"
1+
#270000
0+
#275000
b11101 9
b11101 j"
b11100 X"
b11100 :
b11100 R"
b11100 l"
b11011 I
b11011 :"
b11011 W"
b11010 Z
b11010 #"
b11010 A"
b11001 A
b11001 ("
1+
#280000
0+
#285000
b11110 9
b11110 j"
b11101 X"
b11010 A
b11010 ("
b11011 Z
b11011 #"
b11011 A"
b11100 I
b11100 :"
b11100 W"
b11101 :
b11101 R"
b11101 l"
1+
#290000
0+
#295000
b11111 9
b11111 j"
b11110 X"
b11110 :
b11110 R"
b11110 l"
b11101 I
b11101 :"
b11101 W"
b11100 Z
b11100 #"
b11100 A"
b11011 A
b11011 ("
1+
#300000
0+
#305000
b100000 9
b100000 j"
b11111 X"
b11100 A
b11100 ("
b11101 Z
b11101 #"
b11101 A"
b11110 I
b11110 :"
b11110 W"
b11111 :
b11111 R"
b11111 l"
1+
#310000
0+
#315000
b100001 9
b100001 j"
b100000 X"
b100000 :
b100000 R"
b100000 l"
b11111 I
b11111 :"
b11111 W"
b11110 Z
b11110 #"
b11110 A"
b11101 A
b11101 ("
1+
#320000
0+
#325000
b100010 9
b100010 j"
b100001 X"
b11110 A
b11110 ("
b11111 Z
b11111 #"
b11111 A"
b100000 I
b100000 :"
b100000 W"
b100001 :
b100001 R"
b100001 l"
1+
#330000
0+
#335000
b100011 9
b100011 j"
b100010 X"
b100010 :
b100010 R"
b100010 l"
b100001 I
b100001 :"
b100001 W"
b100000 Z
b100000 #"
b100000 A"
b11111 A
b11111 ("
1+
#340000
0+
#345000
b100100 9
b100100 j"
b100011 X"
b100000 A
b100000 ("
b100001 Z
b100001 #"
b100001 A"
b100010 I
b100010 :"
b100010 W"
b100011 :
b100011 R"
b100011 l"
1+
#350000
0+
#355000
b100101 9
b100101 j"
b100100 X"
b100100 :
b100100 R"
b100100 l"
b100011 I
b100011 :"
b100011 W"
b100010 Z
b100010 #"
b100010 A"
b100001 A
b100001 ("
1+
#360000
0+
#365000
b100110 9
b100110 j"
b100101 X"
b100010 A
b100010 ("
b100011 Z
b100011 #"
b100011 A"
b100100 I
b100100 :"
b100100 W"
b100101 :
b100101 R"
b100101 l"
1+
#370000
0+
#375000
b100111 9
b100111 j"
b100110 X"
b100110 :
b100110 R"
b100110 l"
b100101 I
b100101 :"
b100101 W"
b100100 Z
b100100 #"
b100100 A"
b100011 A
b100011 ("
1+
#380000
0+
#385000
b101000 9
b101000 j"
b100111 X"
b100100 A
b100100 ("
b100101 Z
b100101 #"
b100101 A"
b100110 I
b100110 :"
b100110 W"
b100111 :
b100111 R"
b100111 l"
1+
#390000
0+
#395000
b101001 9
b101001 j"
b101000 X"
b101000 :
b101000 R"
b101000 l"
b100111 I
b100111 :"
b100111 W"
b100110 Z
b100110 #"
b100110 A"
b100101 A
b100101 ("
1+
#400000
0+
#401000
